version: '3'

dotenv: ['.env']


tasks: 
  #broker node 
  broker-install:
    desc: Install packages in node with types
    dir: ./broker
    cmds: 
      - npm install {{.CLI_ARGS}}
      - npm install --save-dev @types/{{.CLI_ARGS}}
  broker-compile:
    desc: build typescipt codes (update from previous, not rebuild)
    dir: ./broker
    cmds: 
      - tsc --skipLibCheck
  broker-rebuild:
    desc: remove old build & rebuild
    dir: ./broker
    cmds:
      - rm -rf ./dist
      - task compile

  broker-main:
    desc: compile + run main file
    dir: ./broker
    deps: [broker-compile]
    cmds: 
      - node ./dist/main.js

  producer-test:
    desc: compile + run test, cliargs =  (topic)  [params in broker/producer.js]
    dir: ./broker
    deps: [broker-compile]
    cmds:
      - node ./dist/producer.js {{.CLI_ARGS}}


  #worker node
  worker-install:
    desc: Install packages in node with types
    dir: ./worker
    cmds: 
      - npm install {{.CLI_ARGS}}
      - npm install --save-dev @types/{{.CLI_ARGS}}
  worker-compile:
    desc: build typescipt codes (update from previous, not rebuild)
    dir: ./worker
    cmds: 
      - tsc --skipLibCheck
  worker-rebuild:
    desc: remove old build & rebuild
    dir: ./worker
    cmds:
      - rm -rf ./dist
      - task compile

  worker-main:
    desc: compile + run main file, cliargs = (topic)
    dir: ./worker
    deps: [worker-compile]
    cmds: 
      - node ./dist/main.js {{.CLI_ARGS}}

  workers-all: 
    desc: run all workers(for all 3 topics) in bg
    dir: scripts
    cmds:
      - ./scripts/workers-all.sh
  
  #database
  db-connect:
    desc: Connect to the timescale db (via psql)
    cmds: 
      - PGPASSWORD="password" psql -h 10.10.10.2 -p 5432 -U postgres

  db-connect-logcore:
    desc: Connect to the timescale db - logcore (via psql)
    cmds: 
      - PGPASSWORD="password" psql -h 10.10.10.2 -p 5432 -U postgres -d logcore

  db-init:
    desc: setup DB, tables & continous aggregrates
    cmds: 
      - echo ''

  db-show-migrations:
    desc: show all possible DB migrations
    dir: worker
    deps: [worker-compile]
    cmds: 
      - node ./dist/db/migrate show

  db-migrate:
    desc: apply migrations for TSDB (table, CAs)  
    dir: worker
    deps: [worker-compile]
    cmds: 
      - node ./dist/db/migrate.js default {{.CLI_ARGS}}

  db-rollback:
    desc: rollback prior to last migrations
    dir: worker
    deps: [worker-compile]
    cmds: 
      - node ./dist/db/migrate down

  db-count-rows:
    desc: get row count(boiler, logistics, greenhouse) in db
    cmds: 
      - ./scripts/count-rows.sh


  #benchmark-tests
  benchmark-redis:
    desc: redis benchmark tests jelp
    cmds:
      - redis-benchmark -t <op> -h <host> -p <port> -n 100000 -c 50 -P 10 

  load-env:
    desc: load environment variable (.env in current dir) to shell (required for tf)
    cmds: 
      - set -a && source .env && set +a


  #infra
  tf-init:
    deps: [load-env]
    cmds: 
      - terraform init 

  tf-preview:
    deps: [load-env]
    cmds:
      - terraform plan

  tf-deploy:
    deps: [load-env]
    cmds:
      - terraform apply